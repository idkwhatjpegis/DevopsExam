<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1174.vdcb_d054cf74a_">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2064.v5eef7d0982b_e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.3">
      <projectUrl>http://192.168.111.101:3000/vagrant/exam</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.3">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <hudson.triggers.SCMTrigger>
          <spec></spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2683.vd0a_8f6a_1c263">
    <script>pipeline 
{
    agent 
    {
        label &apos;docker&apos;
    }
    environment 
    {
        DOCKERHUB_CREDENTIALS=credentials(&apos;docker-hub&apos;)
    }
    stages 
    {
        stage(&apos;Clone&apos;) 
        {
            steps 
            {
                git branch: &apos;main&apos;, url: &apos;http://192.168.111.101:3000/vagrant/exam&apos;
            }
        }
        stage(&apos;First Login&apos;)
        {
            steps 
            {
                sh &apos;echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin&apos;
            }
        }
        stage(&apos;Test Image Build and Push&apos;) 
        {
            steps 
            {
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/test-generator -f generator/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/test-generator&apos; 
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/test-storage -f storage/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/test-storage&apos;
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/test-client -f client/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/test-client&apos;
            }
        }
        stage(&apos;Create Test Network&apos;)
        {
            steps
            {
                sh &apos;docker network ls | grep test-net || docker network create test-net&apos;
            }
        }
        stage(&apos;Run Test Containers&apos;) 
        {
            steps 
            {
                sh &apos;docker container rm -f test-generator || true&apos;
                sh &apos;docker container run -d --name test-generator --net test-net semerdzhiev/test-generator&apos; 
                sh &apos;docker container rm -f test-storage || true&apos;
                sh &apos;docker container run -d --name test-storage --net test-net -e MYSQL_ROOT_PASSWORD=ExamPassword semerdzhiev/test-storage&apos;
                sh &apos;docker container rm -f test-client || true&apos;
                sh &apos;docker container run -d --name test-client --net test-net -p 8080:5000 semerdzhiev/test-client&apos;
            }
        }
        stage(&apos;Test Connectivity &apos;)
        {
            steps
            {
                sh &apos;sleep 30&apos;
                echo &apos;Test #1 - reachability&apos;
                sh &apos;echo $(curl --write-out &quot;%{http_code}&quot; --silent --output /dev/null http://192.168.111.101:8080) | grep 200&apos;
            }
        }
        stage(&apos;CleanUp&apos;)
        {
            steps
            {
                sh &apos;docker container rm -f test-generator&apos;
                sh &apos;docker container rm -f test-client&apos;
                sh &apos;docker container rm -f test-storage&apos;
                sh &apos;docker network rm test-net&apos;
            }
        }
        stage(&apos;Login&apos;)
        {
            steps 
            {
                sh &apos;echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin&apos;
            }
        }
        stage(&apos;Image Build and Push&apos;) 
        {
            steps 
            {
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/con-generator -f generator/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/con-generator&apos; 
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/con-storage -f storage/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/con-storage&apos;
                sh &apos;docker image build -t $DOCKERHUB_CREDENTIALS_USR/con-client -f client/Dockerfile .&apos;
                sh &apos;docker image push $DOCKERHUB_CREDENTIALS_USR/con-client&apos;
            }
        }
        stage(&apos;Create Network&apos;)
        {
            steps
            {
                sh &apos;docker network ls | grep exam-net || docker network create exam-net&apos;
            }
        }
        stage(&apos;Run Containers&apos;) 
        {
            steps 
            {
                sh &apos;docker container rm -f con-generator || true&apos;
                sh &apos;docker container run -d --name con-generator --net exam-net semerdzhiev/con-generator&apos; 
                sh &apos;docker container rm -f con-storage || true&apos;
                sh &apos;docker container run -d --name con-storage --net exam-net -e MYSQL_ROOT_PASSWORD=ExamPassword semerdzhiev/con-storage&apos;
                sh &apos;docker container rm -f con-client || true&apos;
                sh &apos;docker container run -d --name con-client --net exam-net -p 80:5000 semerdzhiev/con-client&apos;
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
